{"version":3,"sources":["components/nav.js","components/search.js","components/movie-card.js","components/movies.js","components/none.js","components/header.js","components/App.js","serviceWorker.js","index.js"],"names":["Nav","props","style","marginBottom","Navbar","bg","variant","Brand","href","fontSize","Form","inline","className","action","onSubmit","handleSubmit","FormControl","type","placeholder","onChange","handleChange","id","Button","Search","Container","Row","Col","md","span","offset","Group","Control","MovieCard","year","date","substring","useState","show","setShow","onClick","Card","width","display","margin","border","backgroundColor","filter","image","Img","src","alt","height","color","textAlign","marginTop","title","Modal","onHide","marginLeft","padding","overview","vote","MovieList","movies","map","movie","i","console","log","key","poster_path","release_date","vote_average","None","Header","App","event","preventDefault","state","replace","window","location","fetch","tmdbAPIKey","then","data","json","setState","results","length","noResults","target","value","currentPage","process","this","search","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b327b7b1.chunk.js","sourcesContent":["import React from \"react\";\nimport { Navbar, Form, FormControl, Button } from \"react-bootstrap\";\n\nconst Nav = (props) => {\n  return (\n    <div style={{ marginBottom: \"40px\" }}>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\" style={{ fontSize: \"24px\" }}>\n          Movie Forward\n        </Navbar.Brand>\n        <Form\n          inline\n          className=\"ml-auto\"\n          action=\"\"\n          onSubmit={props.handleSubmit}\n        >\n          <FormControl\n            type=\"text\"\n            placeholder=\"Seach movie\"\n            onChange={props.handleChange}\n            className=\"mr-sm-2\"\n            id=\"inputSize\"\n          />\n          <Button type=\"submit\" variant=\"outline-info\">\n            Search\n          </Button>\n        </Form>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { Container, Row, Col, Form } from \"react-bootstrap\";\n\nconst Search = (props) => {\n  return (\n    <Container id=\"searchBar\">\n      <Row>\n        <Col md={{ span: 4, offset: 4 }} className=\"mt-5\">\n          <Form action=\"\" onSubmit={props.handleSubmit}>\n            <Form.Group>\n              <Form.Control\n                placeholder=\"Seach movie\"\n                onChange={props.handleChange}\n              />\n            </Form.Group>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default Search;\n","import React, { useState } from \"react\";\nimport { Card, Modal, Container, Row, Col } from \"react-bootstrap\";\n// import MovieModal from \"./modal\";\n\nconst MovieCard = (props) => {\n  const year = props.date.substring(0, 4);\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  return (\n    <div className=\"equal-height-columns\">\n      <div onClick={handleShow} className=\"equal-column-content cardScale\">\n        <Card\n          style={{\n            width: \"13rem\",\n            display: \"inline-block\",\n            margin: \"auto\",\n            border: \"none\",\n            backgroundColor: \"#f5f2d0\",\n            filter: \"drop-shadow(20px 12px 4px black)\",\n            // borderRadius: \"0px\",\n            // boxShadow: \"4px 4px black\",\n          }}\n          className=\"cardDark\"\n        >\n          {props.image == null ? (\n            <Card.Img\n              src={`https://s3-ap-southeast-1.amazonaws.com/upcode/static/default-image.jpg`}\n              alt=\"card image\"\n              style={{ width: \"100% \", height: 260 }}\n            />\n          ) : (\n            <Card.Img\n              variant=\"top\"\n              src={`https://image.tmdb.org/t/p/w500${props.image}`}\n              alt=\"card image\"\n              style={{ width: \"100% \", height: 260, border: \"none\" }}\n            />\n          )}\n        </Card>\n        <div\n          style={{\n            color: \"white\",\n            width: \"13rem\",\n            textAlign: \"center\",\n            marginTop: \"25px\",\n          }}\n        >\n          <h6>{props.title}</h6>\n          <p>\n            <em>{year}</em>\n          </p>\n        </div>\n      </div>\n\n      <Modal\n        show={show}\n        onHide={handleClose}\n        id=\"modal\"\n        style={{ marginLeft: -150 }}\n      >\n        <Container id=\"modalContainer\">\n          <Card\n            style={{\n              border: \"none\",\n            }}\n          >\n            <Row>\n              <Col md={6} style={{ padding: \"20px\" }}>\n                <Card.Img\n                  variant=\"top\"\n                  src={`https://image.tmdb.org/t/p/w500${props.image}`}\n                  alt=\"card image\"\n                  style={{ width: \"100% \", border: \"none\" }}\n                />\n              </Col>\n              <Col md={6} style={{ padding: \"30px\" }}>\n                <h4>\n                  <strong>{props.title}</strong>\n                </h4>\n                <p>{year}</p>\n                <p>{props.overview}</p>\n                <p>\n                  <strong>Rating: </strong>\n                  {props.vote}/10\n                </p>\n              </Col>\n            </Row>\n          </Card>\n        </Container>\n      </Modal>\n    </div>\n  );\n};\n\nexport default MovieCard;\n","import React from \"react\";\nimport Movie from \"./movie-card\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst MovieList = (props) => {\n  return (\n    <div>\n      <Container>\n        <Row>\n          {props.movies.map((movie, i) => {\n            console.log(movie);\n            return (\n              <Col key={i}>\n                <Movie\n                  key={i}\n                  image={movie.poster_path}\n                  title={movie.title}\n                  date={movie.release_date}\n                  overview={movie.overview}\n                  vote={movie.vote_average}\n                />\n              </Col>\n            );\n          })}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default MovieList;\n","import React from \"react\";\n\nconst None = () => {\n  console.log(\"none\");\n  return (\n    <h2 style={{ color: \"white\", textAlign: \"center\" }}>\n      Sorry. No results match your search. Try again!\n    </h2>\n  );\n};\n\nexport default None;\n","import React from \"react\";\n\nconst Header = () => {\n  console.log(\"none\");\n  return (\n    <div style={{ color: \"white\", textAlign: \"center\", marginBottom: \"40px\" }}>\n      <h4>\n        <em>\n          Filter through an endless list of movies to find the perfect film for\n          you!\n        </em>\n      </h4>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Navbar from \"./nav\";\nimport Search from \"./search\";\nimport MovieList from \"./movies\";\nimport None from \"./none\";\nimport Header from \"./header\";\n// import Pagination from \"./pagination\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: [],\n      title: \"\",\n      noResults: false,\n      currentPage: 1,\n    };\n    this.tmdbAPIKey = process.env.REACT_APP_API_KEY;\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    if (this.state.title.replace(/\\s/g, \"\") === \"\") {\n      window.location.href = \"/\";\n    } else {\n      fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${this.tmdbAPIKey}&query=${this.state.title}`\n      )\n        .then((data) => data.json())\n        .then((data) => {\n          this.setState({ movies: [...data.results] });\n          if (this.state.movies.length === 0) {\n            this.setState({ noResults: true });\n          } else {\n            this.setState({ noResults: false });\n          }\n          // console.log(this.state.movies);\n        });\n    }\n  };\n\n  handleChange = (event) => {\n    this.setState({ title: event.target.value });\n  };\n\n  render() {\n    // let moviesPerPage = 8;\n    // let indexOfLastMovie = this.state.currentPage * moviesPerPage;\n    // let indexOfFirstMovie = indexOfLastMovie - moviesPerPage;\n    // let currentMovies = this.state.movies.slice(\n    //   indexOfFirstMovie,\n    //   indexOfLastMovie\n    // );\n\n    // const paginate = (number) => {\n    //   this.setState({ currentPage: number });\n    // };\n\n    return (\n      <div className=\"App\">\n        <Navbar\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n        <Header />\n        <Search\n          handleSubmit={this.handleSubmit}\n          handleChange={this.handleChange}\n        />\n        {this.state.noResults === true ? (\n          <None />\n        ) : (\n          <MovieList\n            // movies={this.state.movies}\n            search={this.state.title}\n            movies={this.state.movies}\n          />\n        )}\n        {/* <Pagination\n          moviesPerPage={moviesPerPage}\n          totalMovies={this.state.movies.length}\n          paginate={paginate}\n        /> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}